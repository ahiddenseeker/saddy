
INCLUDE= -I../../include -I../../include/primitives -I../../include/templates -I../../include/png -I../../include/tga -I../../include/extra -I../../include/config 
PLATFORM = LINUX
TYPE =  release

EXECUTABLE = tests-p2d

ifeq ($(PLATFORM),WIN32)
LDFLAGS= -L../../lib -lsaddy-$(TYPE) -lm -lopengl32  -lglu32 -lkernel32 -luser32 -lgdi32 -lwinspool  -lshell32 -lcomdlg32 -ladvapi32 -O2
DEFINES  = -DWIN32 -DMINGW
OUTPUT   = ../../bin/$(EXECUTABLE)-$(TYPE).exe
else
LDFLAGS= -L../../lib -lsaddy-$(TYPE) -L/usr/X11R6/lib -lm -lrt -lGL -lGLU -lpthread -lX11
DEFINES  = -DUNIX -DLINUX -DGCC
OUTPUT   = ../../bin/$(EXECUTABLE)-$(TYPE)
endif

ifeq ($(TYPE),debug)
CCOPTS = -g
else
CCOPTS = -O2
endif

BUILD    = build/angleof_$(TYPE).o build/axle_$(TYPE).o build/bouncesolver_$(TYPE).o build/collides1d_$(TYPE).o build/collisiontest_$(TYPE).o build/convexhulltest_$(TYPE).o build/findcontactpointsbtob_$(TYPE).o build/findcontactpointsctob_$(TYPE).o build/findcontactpointsctoc_$(TYPE).o build/findcontactpointsctocbug1_$(TYPE).o build/findcontactpointsctocbug2_$(TYPE).o build/findcontactpointsctocbug3_$(TYPE).o build/findcontactpointsctol_$(TYPE).o build/findcontactpointsltob_$(TYPE).o build/findcontactpointsltol_$(TYPE).o build/findcontactpointsrtob_$(TYPE).o build/findcontactpointsrtoc_$(TYPE).o build/findcontactpointsrtocbug1_$(TYPE).o build/findcontactpointsrtol_$(TYPE).o build/findcontactpointsrtor_$(TYPE).o build/grahambuildsortedset_$(TYPE).o build/grahamerasequal_$(TYPE).o build/grahamfindminpoint_$(TYPE).o build/grahamscantest_$(TYPE).o build/main_$(TYPE).o build/point_$(TYPE).o build/rectanglenormaltosurface_$(TYPE).o build/testavintersection_$(TYPE).o build/vector_$(TYPE).o build/worldtest_$(TYPE).o
all: build ../../lib/libsaddy-$(TYPE).a $(OUTPUT)
build:
	mkdir build
../../lib/libsaddy-$(TYPE).a:
	echo "You forgot to build a library!"
$(OUTPUT): build/angleof_$(TYPE).o build/axle_$(TYPE).o build/bouncesolver_$(TYPE).o build/collides1d_$(TYPE).o build/collisiontest_$(TYPE).o build/convexhulltest_$(TYPE).o build/findcontactpointsbtob_$(TYPE).o build/findcontactpointsctob_$(TYPE).o build/findcontactpointsctoc_$(TYPE).o build/findcontactpointsctocbug1_$(TYPE).o build/findcontactpointsctocbug2_$(TYPE).o build/findcontactpointsctocbug3_$(TYPE).o build/findcontactpointsctol_$(TYPE).o build/findcontactpointsltob_$(TYPE).o build/findcontactpointsltol_$(TYPE).o build/findcontactpointsrtob_$(TYPE).o build/findcontactpointsrtoc_$(TYPE).o build/findcontactpointsrtocbug1_$(TYPE).o build/findcontactpointsrtol_$(TYPE).o build/findcontactpointsrtor_$(TYPE).o build/grahambuildsortedset_$(TYPE).o build/grahamerasequal_$(TYPE).o build/grahamfindminpoint_$(TYPE).o build/grahamscantest_$(TYPE).o build/main_$(TYPE).o build/point_$(TYPE).o build/rectanglenormaltosurface_$(TYPE).o build/testavintersection_$(TYPE).o build/vector_$(TYPE).o build/worldtest_$(TYPE).o
	g++ $(BUILD)   $(CCOPTS)  -o  $(OUTPUT)    $(LDFLAGS)
build/angleof_$(TYPE).o: angleof.cpp
	g++ -c $(CCOPTS) angleof.cpp -o build/angleof_$(TYPE).o $(INCLUDE) $(DEFINES)
build/axle_$(TYPE).o: axle.cpp
	g++ -c $(CCOPTS) axle.cpp -o build/axle_$(TYPE).o $(INCLUDE) $(DEFINES)
build/bouncesolver_$(TYPE).o: bouncesolver.cpp
	g++ -c $(CCOPTS) bouncesolver.cpp -o build/bouncesolver_$(TYPE).o $(INCLUDE) $(DEFINES)
build/collides1d_$(TYPE).o: collides1d.cpp
	g++ -c $(CCOPTS) collides1d.cpp -o build/collides1d_$(TYPE).o $(INCLUDE) $(DEFINES)
build/collisiontest_$(TYPE).o: collisiontest.cpp
	g++ -c $(CCOPTS) collisiontest.cpp -o build/collisiontest_$(TYPE).o $(INCLUDE) $(DEFINES)
build/convexhulltest_$(TYPE).o: convexhulltest.cpp
	g++ -c $(CCOPTS) convexhulltest.cpp -o build/convexhulltest_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsbtob_$(TYPE).o: findcontactpointsbtob.cpp
	g++ -c $(CCOPTS) findcontactpointsbtob.cpp -o build/findcontactpointsbtob_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsctob_$(TYPE).o: findcontactpointsctob.cpp
	g++ -c $(CCOPTS) findcontactpointsctob.cpp -o build/findcontactpointsctob_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsctoc_$(TYPE).o: findcontactpointsctoc.cpp
	g++ -c $(CCOPTS) findcontactpointsctoc.cpp -o build/findcontactpointsctoc_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsctocbug1_$(TYPE).o: findcontactpointsctocbug1.cpp
	g++ -c $(CCOPTS) findcontactpointsctocbug1.cpp -o build/findcontactpointsctocbug1_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsctocbug2_$(TYPE).o: findcontactpointsctocbug2.cpp
	g++ -c $(CCOPTS) findcontactpointsctocbug2.cpp -o build/findcontactpointsctocbug2_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsctocbug3_$(TYPE).o: findcontactpointsctocbug3.cpp
	g++ -c $(CCOPTS) findcontactpointsctocbug3.cpp -o build/findcontactpointsctocbug3_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsctol_$(TYPE).o: findcontactpointsctol.cpp
	g++ -c $(CCOPTS) findcontactpointsctol.cpp -o build/findcontactpointsctol_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsltob_$(TYPE).o: findcontactpointsltob.cpp
	g++ -c $(CCOPTS) findcontactpointsltob.cpp -o build/findcontactpointsltob_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsltol_$(TYPE).o: findcontactpointsltol.cpp
	g++ -c $(CCOPTS) findcontactpointsltol.cpp -o build/findcontactpointsltol_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsrtob_$(TYPE).o: findcontactpointsrtob.cpp
	g++ -c $(CCOPTS) findcontactpointsrtob.cpp -o build/findcontactpointsrtob_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsrtoc_$(TYPE).o: findcontactpointsrtoc.cpp
	g++ -c $(CCOPTS) findcontactpointsrtoc.cpp -o build/findcontactpointsrtoc_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsrtocbug1_$(TYPE).o: findcontactpointsrtocbug1.cpp
	g++ -c $(CCOPTS) findcontactpointsrtocbug1.cpp -o build/findcontactpointsrtocbug1_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsrtol_$(TYPE).o: findcontactpointsrtol.cpp
	g++ -c $(CCOPTS) findcontactpointsrtol.cpp -o build/findcontactpointsrtol_$(TYPE).o $(INCLUDE) $(DEFINES)
build/findcontactpointsrtor_$(TYPE).o: findcontactpointsrtor.cpp
	g++ -c $(CCOPTS) findcontactpointsrtor.cpp -o build/findcontactpointsrtor_$(TYPE).o $(INCLUDE) $(DEFINES)
build/grahambuildsortedset_$(TYPE).o: grahambuildsortedset.cpp
	g++ -c $(CCOPTS) grahambuildsortedset.cpp -o build/grahambuildsortedset_$(TYPE).o $(INCLUDE) $(DEFINES)
build/grahamerasequal_$(TYPE).o: grahamerasequal.cpp
	g++ -c $(CCOPTS) grahamerasequal.cpp -o build/grahamerasequal_$(TYPE).o $(INCLUDE) $(DEFINES)
build/grahamfindminpoint_$(TYPE).o: grahamfindminpoint.cpp
	g++ -c $(CCOPTS) grahamfindminpoint.cpp -o build/grahamfindminpoint_$(TYPE).o $(INCLUDE) $(DEFINES)
build/grahamscantest_$(TYPE).o: grahamscantest.cpp
	g++ -c $(CCOPTS) grahamscantest.cpp -o build/grahamscantest_$(TYPE).o $(INCLUDE) $(DEFINES)
build/main_$(TYPE).o: main.cpp
	g++ -c $(CCOPTS) main.cpp -o build/main_$(TYPE).o $(INCLUDE) $(DEFINES)
build/point_$(TYPE).o: point.cpp
	g++ -c $(CCOPTS) point.cpp -o build/point_$(TYPE).o $(INCLUDE) $(DEFINES)
build/rectanglenormaltosurface_$(TYPE).o: rectanglenormaltosurface.cpp
	g++ -c $(CCOPTS) rectanglenormaltosurface.cpp -o build/rectanglenormaltosurface_$(TYPE).o $(INCLUDE) $(DEFINES)
build/testavintersection_$(TYPE).o: testavintersection.cpp
	g++ -c $(CCOPTS) testavintersection.cpp -o build/testavintersection_$(TYPE).o $(INCLUDE) $(DEFINES)
build/vector_$(TYPE).o: vector.cpp
	g++ -c $(CCOPTS) vector.cpp -o build/vector_$(TYPE).o $(INCLUDE) $(DEFINES)
build/worldtest_$(TYPE).o: worldtest.cpp
	g++ -c $(CCOPTS) worldtest.cpp -o build/worldtest_$(TYPE).o $(INCLUDE) $(DEFINES)
clean:
ifeq ($(PLATFORM),WIN32)
	rd /s/q "build/*"
	del "$(OUTPUT)"
else
	rm -r ".build/*"
	rm "$(OUTPUT)"
endif
.PHONY: all clean